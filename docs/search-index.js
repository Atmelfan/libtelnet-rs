var searchIndex = JSON.parse('{\
"libtelnet_rs":{"doc":"","i":[[3,"Parser","libtelnet_rs","A telnet parser that handles the main parts of the protocol.",null,null],[12,"options","","",0,null],[4,"EventType","","",null,null],[13,"None","","",1,null],[13,"IAC","","",1,null],[13,"SubNegotiation","","",1,null],[13,"Neg","","",1,null],[0,"compatibility","","",null,null],[3,"CompatibilityEntry","libtelnet_rs::compatibility","An expansion of a bitmask contained in `CompatibilityTable`.",null,null],[12,"local","","Whether we support this option from us -> them.",2,null],[12,"remote","","Whether we support this option from them -> us.",2,null],[12,"local_state","","Whether this option is locally enabled.",2,null],[12,"remote_state","","Whether this option is remotely enabled.",2,null],[3,"CompatibilityTable","","A table of options that are supported locally or remotely,…",null,null],[11,"new","","",2,[[]]],[11,"into_u8","","Creates a u8 bitmask from this entry.",2,[[]]],[11,"from","","Expands a u8 bitmask into a CompatibilityEntry.",2,[[]]],[18,"ENABLED_LOCAL","","Option is locally supported.",3,null],[18,"ENABLED_REMOTE","","Option is remotely supported.",3,null],[18,"LOCAL_STATE","","Option is currently enabled locally.",3,null],[18,"REMOTE_STATE","","Option is currently enabled remotely.",3,null],[11,"new","","",3,[[]]],[11,"from_options","","Create a table with some option values set.",3,[[]]],[11,"support_local","","Enable local support for an option.",3,[[]]],[11,"support_remote","","Enable remote support for an option.",3,[[]]],[11,"support","","Enable both remote and local support for an option.",3,[[]]],[11,"get_option","","Retrieve a `CompatbilityEntry` generated from the current…",3,[[],["compatibilityentry",3]]],[11,"set_option","","Set an option value by getting the bitmask from a…",3,[[["compatibilityentry",3]]]],[0,"events","libtelnet_rs","",null,null],[3,"TelnetIAC","libtelnet_rs::events","A struct represting a 2 byte IAC sequence.",null,null],[12,"command","","",4,null],[3,"TelnetNegotiation","","A struct representing a 3 byte IAC sequence.",null,null],[12,"command","","",5,null],[12,"option","","",5,null],[3,"TelnetSubnegotiation","","A struct representing an arbitrary length IAC…",null,null],[12,"option","","",6,null],[12,"buffer","","",6,null],[4,"TelnetEvents","","An enum representing various telnet events.",null,null],[13,"IAC","","An IAC command sequence.",7,null],[13,"Negotiation","","An IAC negotiation sequence.",7,null],[13,"Subnegotiation","","An IAC subnegotiation sequence.",7,null],[13,"DataReceive","","Regular data received from the remote end.",7,null],[13,"DataSend","","Any data to be sent to the remote end.",7,null],[13,"DecompressImmediate","","MCCP2/3 compatibility. MUST DECOMPRESS THIS DATA BEFORE…",7,null],[11,"new","","",4,[[]]],[11,"into_bytes","","Consume the sequence struct and return the bytes.",4,[[],["vec",3]]],[11,"new","","",5,[[]]],[11,"into_bytes","","Consume the sequence struct and return the bytes.",5,[[],["vec",3]]],[11,"new","","",6,[[]]],[11,"into_bytes","","Consume the sequence struct and return the bytes.",6,[[],["vec",3]]],[11,"build_send","","Helper method to generate a TelnetEvents::DataSend.",7,[[["vec",3]]]],[11,"build_receive","","Helper method to generate a TelnetEvents::DataReceive.",7,[[["vec",3]]]],[11,"build_iac","","Helper method to generate a TelnetEvents::IAC.",7,[[],["telnetevents",4]]],[11,"build_negotiation","","Helper method to generate a TelnetEvents::Negotiation.",7,[[]]],[11,"build_subnegotiation","","Helper method to generate a TelnetEvents::Subnegotiation.",7,[[["vec",3]]]],[0,"telnet","libtelnet_rs","",null,null],[0,"op_command","libtelnet_rs::telnet","Module containing constants for Telnet Command codes.",null,null],[17,"IAC","libtelnet_rs::telnet::op_command","",null,null],[17,"WILL","","",null,null],[17,"WONT","","",null,null],[17,"DO","","",null,null],[17,"DONT","","",null,null],[17,"NOP","","",null,null],[17,"SB","","",null,null],[17,"SE","","",null,null],[17,"IS","","",null,null],[17,"SEND","","",null,null],[17,"GA","","",null,null],[17,"EOR","","",null,null],[0,"op_option","libtelnet_rs::telnet","Module containing constants for Telnet Option codes.",null,null],[17,"BINARY","libtelnet_rs::telnet::op_option","",null,null],[17,"ECHO","","",null,null],[17,"RCP","","",null,null],[17,"SGA","","",null,null],[17,"NAMS","","",null,null],[17,"STATUS","","",null,null],[17,"TM","","",null,null],[17,"RCTE","","",null,null],[17,"NAOL","","",null,null],[17,"NAOP","","",null,null],[17,"NAOCRD","","",null,null],[17,"NAOHTS","","",null,null],[17,"NAOHTD","","",null,null],[17,"NAOFFD","","",null,null],[17,"NAOVTS","","",null,null],[17,"NAOVTD","","",null,null],[17,"NAOLFD","","",null,null],[17,"XASCII","","",null,null],[17,"LOGOUT","","",null,null],[17,"BM","","",null,null],[17,"DET","","",null,null],[17,"SUPDUP","","",null,null],[17,"SUPDUPOUTPUT","","",null,null],[17,"SNDLOC","","",null,null],[17,"TTYPE","","",null,null],[17,"EOR","","",null,null],[17,"TUID","","",null,null],[17,"OUTMRK","","",null,null],[17,"TTYLOC","","",null,null],[17,"_3270REGIME","","",null,null],[17,"X3PAD","","",null,null],[17,"NAWS","","",null,null],[17,"TSPEED","","",null,null],[17,"LFLOW","","",null,null],[17,"LINEMODE","","",null,null],[17,"XDISPLOC","","",null,null],[17,"ENVIRON","","",null,null],[17,"AUTHENTICATION","","",null,null],[17,"ENCRYPT","","",null,null],[17,"NEWENVIRON","","",null,null],[17,"MSSP","","",null,null],[17,"ZMP","","",null,null],[17,"EXOPL","","",null,null],[17,"MCCP2","","",null,null],[17,"MCCP3","","",null,null],[17,"GMCP","","",null,null],[11,"new","libtelnet_rs","Create a default, empty Parser with an internal buffer…",0,[[]]],[11,"with_capacity","","Create an empty parser, setting the initial internal…",0,[[]]],[11,"with_support_and_capacity","","Create an parser, setting the initial internal buffer…",0,[[["compatibilitytable",3]]]],[11,"with_support","","Create a parser, directly supplying a CompatibilityTable.",0,[[["compatibilitytable",3]]]],[11,"receive","","Receive bytes into the internal buffer.",0,[[],[["vec",3],["telnetevents",4]]]],[11,"linemode_enabled","","Get whether the remote end supports and is using linemode.",0,[[]]],[11,"escape_iac","","Escape IAC bytes in data that is to be transmitted and…",0,[[["vec",3]],["vec",3]]],[11,"unescape_iac","","Reverse escaped IAC bytes for non-IAC sequences and data.",0,[[["vec",3]],["vec",3]]],[11,"negotiate","","Negotiate an option.",0,[[],["telnetevents",4]]],[11,"_will","","Indicate to the other side that you are able and wanting…",0,[[],[["option",4],["telnetevents",4]]]],[11,"_wont","","Indicate to the other side that you are not wanting to…",0,[[],[["option",4],["telnetevents",4]]]],[11,"_do","","Indicate to the other side that you would like them to…",0,[[],[["option",4],["telnetevents",4]]]],[11,"_dont","","Indicate to the other side that you would like them to…",0,[[],[["option",4],["telnetevents",4]]]],[11,"subnegotiation","","Send a subnegotiation for a locally supported option.",0,[[["vec",3]],[["option",4],["telnetevents",4]]]],[11,"subnegotiation_text","","Send a subnegotiation for a locally supported option,…",0,[[],[["option",4],["telnetevents",4]]]],[11,"send_text","","Directly send a string, with appended `\\\\r\\\\n`, to the…",0,[[],["telnetevents",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","libtelnet_rs::compatibility","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","libtelnet_rs::events","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"clone","libtelnet_rs::compatibility","",2,[[],["compatibilityentry",3]]],[11,"clone","libtelnet_rs::events","",4,[[],["telnetiac",3]]],[11,"clone","","",5,[[],["telnetnegotiation",3]]],[11,"clone","","",6,[[],["telnetsubnegotiation",3]]],[11,"clone","","",7,[[],["telnetevents",4]]],[11,"default","libtelnet_rs::compatibility","",3,[[]]],[11,"default","libtelnet_rs","",0,[[],["parser",3]]]],"p":[[3,"Parser"],[4,"EventType"],[3,"CompatibilityEntry"],[3,"CompatibilityTable"],[3,"TelnetIAC"],[3,"TelnetNegotiation"],[3,"TelnetSubnegotiation"],[4,"TelnetEvents"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);